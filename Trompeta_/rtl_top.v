/* Generated by Yosys 0.33+6 (git sha1 41b34a193, x86_64-conda-linux-gnu-cc 11.2.0 -fvisibility-inlines-hidden -fmessage-length=0 -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -fdebug-prefix-map=/root/conda-eda/conda-eda/workdir/conda-env/conda-bld/yosys_1694128612374/work=/usr/local/src/conda/yosys-0.33_7_g41b34a193 -fdebug-prefix-map=/home/alpamama/miniconda3/envs/digital=/usr/local/src/conda-prefix -fPIC -Os -fno-merge-constants) */

(* src = "debounce.v:1.1-19.10" *)
module debounce(clk, button_in, button_out);
  (* src = "debounce.v:16.24-16.35" *)
  (* unused_bits = "20 21 22 23 24 25 26 27 28 29 30 31" *)
  wire [31:0] _00_;
  wire _01_;
  wire _02_;
  (* src = "debounce.v:13.22-13.44" *)
  wire _03_;
  (* src = "debounce.v:10.13-10.38" *)
  wire _04_;
  (* src = "debounce.v:3.11-3.20" *)
  input button_in;
  wire button_in;
  (* src = "debounce.v:4.16-4.26" *)
  output button_out;
  reg button_out;
  (* src = "debounce.v:7.9-7.21" *)
  reg button_state;
  (* src = "debounce.v:2.11-2.14" *)
  input clk;
  wire clk;
  (* src = "debounce.v:6.16-6.23" *)
  reg [19:0] counter;
  assign _00_ = counter + (* src = "debounce.v:16.24-16.35" *) 32'd1;
  (* src = "debounce.v:9.5-18.8" *)
  always @(posedge clk)
    if (_01_) button_out <= button_state;
  (* src = "debounce.v:9.5-18.8" *)
  always @(posedge clk)
    if (_04_) counter <= 20'h00000;
    else if (!_03_) counter <= _00_[19:0];
  (* src = "debounce.v:9.5-18.8" *)
  always @(posedge clk)
    if (_04_) button_state <= button_in;
  assign _02_ = ~ _04_;
  assign _01_ = & { _02_, _03_ };
  assign _03_ = counter == (* src = "debounce.v:13.22-13.44" *) 20'h7a120;
  assign _04_ = button_in != (* src = "debounce.v:10.13-10.38" *) button_state;
endmodule

(* top =  1  *)
(* src = "top.v:4.1-51.10" *)
module top(clk, btn0_raw, btn1_raw, btn2_raw, tx);
  (* src = "top.v:6.12-6.20" *)
  input btn0_raw;
  wire btn0_raw;
  (* src = "top.v:7.12-7.20" *)
  input btn1_raw;
  wire btn1_raw;
  (* src = "top.v:8.12-8.20" *)
  input btn2_raw;
  wire btn2_raw;
  (* src = "top.v:31.16-31.20" *)
  wire busy;
  (* src = "top.v:5.12-5.15" *)
  input clk;
  wire clk;
  (* src = "top.v:30.16-30.20" *)
  wire [7:0] data;
  (* src = "top.v:29.16-29.20" *)
  wire send;
  (* src = "top.v:9.12-9.14" *)
  output tx;
  wire tx;
  (* module_not_derived = 32'd1 *)
  (* src = "top.v:43.13-49.6" *)
  uart_tx uart (
    .busy(busy),
    .clk(clk),
    .data(data),
    .send(send),
    .tx(tx)
  );
endmodule

(* src = "uart_tx.v:1.1-40.10" *)
module uart_tx(clk, tx_data, tx_start, tx);
  (* src = "uart_tx.v:15.5-39.8" *)
  wire [15:0] _00_;
  (* src = "uart_tx.v:15.5-39.8" *)
  wire [3:0] _01_;
  (* src = "uart_tx.v:15.5-39.8" *)
  wire _02_;
  (* src = "uart_tx.v:27.33-27.44" *)
  (* unused_bits = "16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" *)
  wire [31:0] _03_;
  (* src = "uart_tx.v:30.26-30.35" *)
  (* unused_bits = "4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" *)
  wire [31:0] _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  wire _13_;
  (* src = "uart_tx.v:23.20-23.41" *)
  wire _14_;
  wire _15_;
  wire [3:0] _16_;
  wire _17_;
  wire [3:0] _18_;
  wire [6:0] _19_;
  wire _20_;
  wire [3:0] _21_;
  wire _22_;
  wire [3:0] _23_;
  wire _24_;
  wire _25_;
  wire _26_;
  wire _27_;
  wire [15:0] _28_;
  wire [15:0] _29_;
  (* src = "uart_tx.v:0.0-0.0" *)
  wire _30_;
  (* src = "uart_tx.v:31.33-31.40" *)
  wire [31:0] _31_;
  (* src = "uart_tx.v:2.11-2.14" *)
  input clk;
  wire clk;
  (* src = "uart_tx.v:12.16-12.23" *)
  reg [15:0] counter = 16'h0000;
  (* src = "uart_tx.v:13.15-13.24" *)
  reg [7:0] shift_reg;
  (* src = "uart_tx.v:11.15-11.20" *)
  reg [3:0] state = 4'h0;
  (* src = "uart_tx.v:5.16-5.18" *)
  output tx;
  reg tx;
  (* src = "uart_tx.v:3.17-3.24" *)
  input [7:0] tx_data;
  wire [7:0] tx_data;
  (* src = "uart_tx.v:4.11-4.19" *)
  input tx_start;
  wire tx_start;
  assign _04_ = state + (* src = "uart_tx.v:30.26-30.35" *) 32'd1;
  assign _03_ = counter + (* src = "uart_tx.v:37.33-37.44" *) 32'd1;
  (* src = "uart_tx.v:15.5-39.8" *)
  always @(posedge clk)
    if (_10_) counter <= _00_;
  (* src = "uart_tx.v:15.5-39.8" *)
  always @(posedge clk)
    if (_11_) state <= _01_;
  (* src = "uart_tx.v:15.5-39.8" *)
  always @(posedge clk)
    if (_12_) shift_reg <= tx_data;
  (* src = "uart_tx.v:15.5-39.8" *)
  always @(posedge clk)
    if (_11_) tx <= _02_;
  assign _05_ = { _15_, tx_start } != 2'h2;
  assign _06_ = | { _15_, _22_, _20_, _17_ };
  assign _07_ = { _17_, _14_ } != 2'h2;
  assign _08_ = { _20_, _14_ } != 2'h2;
  assign _09_ = { _22_, _14_ } != 2'h2;
  assign _10_ = & { _05_, _06_ };
  assign _11_ = & { _05_, _06_, _09_, _08_, _07_ };
  assign _12_ = & { _15_, tx_start };
  assign _13_ = | { _22_, _19_, _17_ };
  assign _14_ = counter == (* src = "uart_tx.v:33.20-33.41" *) 16'h00d8;
  assign _16_ = _14_ ? (* full_case = 32'd1 *) (* src = "uart_tx.v:33.20-33.41|uart_tx.v:33.16-37.45" *) 4'h0 : 4'hx;
  function [3:0] _49_;
    input [3:0] a;
    input [15:0] b;
    input [3:0] s;
    (* src = "uart_tx.v:0.0-0.0|uart_tx.v:16.9-38.16" *)
    (* parallel_case *)
    casez (s)
      4'b???1:
        _49_ = b[3:0];
      4'b??1?:
        _49_ = b[7:4];
      4'b?1??:
        _49_ = b[11:8];
      4'b1???:
        _49_ = b[15:12];
      default:
        _49_ = a;
    endcase
  endfunction
  assign _01_ = _49_(4'hx, { _23_, _21_, _18_, _16_ }, { _15_, _22_, _20_, _17_ });
  assign _18_ = _14_ ? (* full_case = 32'd1 *) (* src = "uart_tx.v:28.32-28.53|uart_tx.v:28.28-32.45" *) _04_[3:0] : 4'hx;
  assign _21_ = _14_ ? (* full_case = 32'd1 *) (* src = "uart_tx.v:23.20-23.41|uart_tx.v:23.16-27.45" *) 4'h2 : 4'hx;
  assign _23_ = tx_start ? (* src = "uart_tx.v:17.20-17.28|uart_tx.v:17.16-22.16" *) 4'h1 : 4'hx;
  assign _24_ = _14_ ? (* full_case = 32'd1 *) (* src = "uart_tx.v:33.20-33.41|uart_tx.v:33.16-37.45" *) 1'h1 : 1'hx;
  function [0:0] _54_;
    input [0:0] a;
    input [3:0] b;
    input [3:0] s;
    (* src = "uart_tx.v:0.0-0.0|uart_tx.v:16.9-38.16" *)
    (* parallel_case *)
    casez (s)
      4'b???1:
        _54_ = b[0:0];
      4'b??1?:
        _54_ = b[1:1];
      4'b?1??:
        _54_ = b[2:2];
      4'b1???:
        _54_ = b[3:3];
      default:
        _54_ = a;
    endcase
  endfunction
  assign _02_ = _54_(1'hx, { _27_, _26_, _25_, _24_ }, { _15_, _22_, _20_, _17_ });
  assign _25_ = _14_ ? (* full_case = 32'd1 *) (* src = "uart_tx.v:28.32-28.53|uart_tx.v:28.28-32.45" *) _30_ : 1'hx;
  assign _26_ = _14_ ? (* full_case = 32'd1 *) (* src = "uart_tx.v:23.20-23.41|uart_tx.v:23.16-27.45" *) shift_reg[0] : 1'hx;
  assign _27_ = tx_start ? (* src = "uart_tx.v:17.20-17.28|uart_tx.v:17.16-22.16" *) 1'h0 : 1'hx;
  function [15:0] _58_;
    input [15:0] a;
    input [31:0] b;
    input [1:0] s;
    (* src = "uart_tx.v:0.0-0.0|uart_tx.v:16.9-38.16" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        _58_ = b[15:0];
      2'b1?:
        _58_ = b[31:16];
      default:
        _58_ = a;
    endcase
  endfunction
  assign _00_ = _58_(16'hxxxx, { _29_, _28_ }, { _15_, _13_ });
  assign _17_ = state == (* src = "uart_tx.v:0.0-0.0|uart_tx.v:16.9-38.16" *) 4'h9;
  assign _20_ = | (* src = "uart_tx.v:0.0-0.0|uart_tx.v:16.9-38.16" *) _19_;
  assign _19_[0] = state == (* src = "uart_tx.v:0.0-0.0|uart_tx.v:16.9-38.16" *) 4'h2;
  assign _19_[1] = state == (* src = "uart_tx.v:0.0-0.0|uart_tx.v:16.9-38.16" *) 4'h3;
  assign _19_[2] = state == (* src = "uart_tx.v:0.0-0.0|uart_tx.v:16.9-38.16" *) 4'h4;
  assign _19_[3] = state == (* src = "uart_tx.v:0.0-0.0|uart_tx.v:16.9-38.16" *) 4'h5;
  assign _19_[4] = state == (* src = "uart_tx.v:0.0-0.0|uart_tx.v:16.9-38.16" *) 4'h6;
  assign _19_[5] = state == (* src = "uart_tx.v:0.0-0.0|uart_tx.v:16.9-38.16" *) 4'h7;
  assign _19_[6] = state == (* src = "uart_tx.v:0.0-0.0|uart_tx.v:16.9-38.16" *) 4'h8;
  assign _28_ = _14_ ? (* full_case = 32'd1 *) (* src = "uart_tx.v:23.20-23.41|uart_tx.v:23.16-27.45" *) 16'h0000 : _03_[15:0];
  assign _22_ = state == (* src = "uart_tx.v:0.0-0.0|uart_tx.v:16.9-38.16" *) 4'h1;
  assign _29_ = tx_start ? (* src = "uart_tx.v:17.20-17.28|uart_tx.v:17.16-22.16" *) 16'h0000 : 16'hxxxx;
  assign _15_ = ! (* src = "uart_tx.v:0.0-0.0|uart_tx.v:16.9-38.16" *) state;
  wire [7:0] _74_ = shift_reg;
  assign _30_ = _74_[$signed(_31_) +: 1];
  assign _31_ = state - (* src = "uart_tx.v:31.33-31.40" *) 32'd1;
endmodule
